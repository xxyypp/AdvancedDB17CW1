// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef YELP_ODB_HXX
#define YELP_ODB_HXX

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "Yelp.hpp"

#include <memory>
#include <cstddef>
#include <utility>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/no-op-cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>
#include <odb/view-image.hxx>
#include <odb/view-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // StarCount
  //
  template <>
  struct class_traits< ::StarCount >
  {
    static const class_kind kind = class_view;
  };

  template <>
  class access::view_traits< ::StarCount >
  {
    public:
    typedef ::StarCount view_type;
    typedef ::StarCount* pointer_type;

    static void
    callback (database&, view_type&, callback_event);
  };

  // LastQueryTime
  //
  template <>
  struct class_traits< ::LastQueryTime >
  {
    static const class_kind kind = class_view;
  };

  template <>
  class access::view_traits< ::LastQueryTime >
  {
    public:
    typedef ::LastQueryTime view_type;
    typedef ::LastQueryTime* pointer_type;

    static void
    callback (database&, view_type&, callback_event);
  };

  // user
  //
  template <>
  struct class_traits< ::user >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::user >
  {
    public:
    typedef ::user object_type;
    typedef ::user* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::std::string id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // review
  //
  template <>
  struct class_traits< ::review >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::review >
  {
    public:
    typedef ::review object_type;
    typedef ::review* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::std::string id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // business
  //
  template <>
  struct class_traits< ::business >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::business >
  {
    public:
    typedef ::business object_type;
    typedef ::business* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::std::string id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // hours
  //
  template <>
  struct class_traits< ::hours >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::hours >
  {
    public:
    typedef ::hours object_type;
    typedef ::hours* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef int id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/mssql/version.hxx>
#include <odb/mssql/forward.hxx>
#include <odb/mssql/binding.hxx>
#include <odb/mssql/mssql-types.hxx>
#include <odb/mssql/query.hxx>

namespace odb
{
  // StarCount
  //
  template <>
  class access::view_traits_impl< ::StarCount, id_mssql >:
    public access::view_traits< ::StarCount >
  {
    public:
    struct image_type
    {
      // stars
      //
      int stars_value;
      SQLLEN stars_size_ind;

      // count
      //
      int count_value;
      SQLLEN count_size_ind;

      std::size_t version;

      mssql::change_callback change_callback_;

      mssql::change_callback*
      change_callback ()
      {
        return &change_callback_;
      }
    };

    typedef mssql::view_statements<view_type> statements_type;

    typedef mssql::query_base query_base_type;
    struct query_columns
    {
    };

    static const bool versioned = false;

    static void
    bind (mssql::bind*,
          image_type&);

    static void
    init (view_type&,
          const image_type&,
          database*);

    static const std::size_t column_count = 2UL;

    static result<view_type>
    query (database&, const query_base_type&);
  };

  template <>
  class access::view_traits_impl< ::StarCount, id_common >:
    public access::view_traits_impl< ::StarCount, id_mssql >
  {
  };

  // LastQueryTime
  //
  template <>
  class access::view_traits_impl< ::LastQueryTime, id_mssql >:
    public access::view_traits< ::LastQueryTime >
  {
    public:
    struct image_type
    {
      // text
      //
      char text_value[513];
      SQLLEN text_size_ind;

      // elapsed_time
      //
      long long elapsed_time_value;
      SQLLEN elapsed_time_size_ind;

      std::size_t version;

      mssql::change_callback change_callback_;

      mssql::change_callback*
      change_callback ()
      {
        return &change_callback_;
      }
    };

    typedef mssql::view_statements<view_type> statements_type;

    typedef mssql::query_base query_base_type;
    struct query_columns
    {
    };

    static const bool versioned = false;

    static void
    bind (mssql::bind*,
          image_type&);

    static void
    init (view_type&,
          const image_type&,
          database*);

    static const std::size_t column_count = 2UL;

    static query_base_type
    query_statement (const query_base_type&);

    static result<view_type>
    query (database&, const query_base_type&);
  };

  template <>
  class access::view_traits_impl< ::LastQueryTime, id_common >:
    public access::view_traits_impl< ::LastQueryTime, id_mssql >
  {
  };

  // user
  //
  template <typename A>
  struct query_columns< ::user, id_mssql, A >
  {
    // id
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::std::string,
        mssql::id_string >::query_type,
      mssql::id_string >
    id_type_;

    static const id_type_ id;

    // name
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::std::string,
        mssql::id_string >::query_type,
      mssql::id_string >
    name_type_;

    static const name_type_ name;
  };

  template <typename A>
  const typename query_columns< ::user, id_mssql, A >::id_type_
  query_columns< ::user, id_mssql, A >::
  id (A::table_name, "[id]", 0, 256);

  template <typename A>
  const typename query_columns< ::user, id_mssql, A >::name_type_
  query_columns< ::user, id_mssql, A >::
  name (A::table_name, "[name]", 0, 512);

  template <typename A>
  struct pointer_query_columns< ::user, id_mssql, A >:
    query_columns< ::user, id_mssql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::user, id_mssql >:
    public access::object_traits< ::user >
  {
    public:
    static const std::size_t batch = 1UL;

    static const bool rowversion = false;

    struct id_image_type
    {
      char id_value[257];
      SQLLEN id_size_ind;

      std::size_t version;
    };

    struct image_type
    {
      // id
      //
      char id_value[257];
      SQLLEN id_size_ind;

      // name
      //
      char name_value[513];
      SQLLEN name_size_ind;

      std::size_t version;

      mssql::change_callback change_callback_;

      mssql::change_callback*
      change_callback ()
      {
        return &change_callback_;
      }
    };

    struct extra_statement_cache_type;

    // review_
    //
    struct review_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 2UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::std::vector< ::odb::lazy_ptr< ::review > > container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::index_type index_type;
      typedef container_traits_type::value_type value_type;

      typedef ordered_functions<index_type, value_type> functions_type;
      typedef mssql::container_statements< review_traits > statements_type;

      struct data_image_type
      {
        // value
        //
        char value_value[257];
        SQLLEN value_size_ind;

        std::size_t version;
      };

      static void
      bind (mssql::bind*,
            const mssql::bind* id,
            std::size_t id_size,
            data_image_type&);

      static void
      init (value_type&,
            const data_image_type&,
            database*);

      static void
      insert (index_type, const value_type&, void*);

      static bool
      select (index_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      load (container_type&,
            statements_type&);
    };

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static void
    bind (mssql::bind*,
          image_type&,
          mssql::statement_kind);

    static void
    bind (mssql::bind*, id_image_type&);

    static void
    init (image_type&,
          const object_type&,
          mssql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mssql::object_statements<object_type> statements_type;

    typedef mssql::query_base query_base_type;

    static const std::size_t column_count = 2UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, const object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::user, id_common >:
    public access::object_traits_impl< ::user, id_mssql >
  {
  };

  // review
  //
  template <typename A>
  struct pointer_query_columns< ::review, id_mssql, A >
  {
    // id
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::std::string,
        mssql::id_string >::query_type,
      mssql::id_string >
    id_type_;

    static const id_type_ id;

    // user_id
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::std::string,
        mssql::id_string >::query_type,
      mssql::id_string >
    user_id_type_;

    static const user_id_type_ user_id;

    // business_id
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::std::string,
        mssql::id_string >::query_type,
      mssql::id_string >
    business_id_type_;

    static const business_id_type_ business_id;
  };

  template <typename A>
  const typename pointer_query_columns< ::review, id_mssql, A >::id_type_
  pointer_query_columns< ::review, id_mssql, A >::
  id (A::table_name, "[id]", 0, 256);

  template <typename A>
  const typename pointer_query_columns< ::review, id_mssql, A >::user_id_type_
  pointer_query_columns< ::review, id_mssql, A >::
  user_id (A::table_name, "[user_id]", 0, 256);

  template <typename A>
  const typename pointer_query_columns< ::review, id_mssql, A >::business_id_type_
  pointer_query_columns< ::review, id_mssql, A >::
  business_id (A::table_name, "[business_id]", 0, 256);

  template <>
  class access::object_traits_impl< ::review, id_mssql >:
    public access::object_traits< ::review >
  {
    public:
    static const std::size_t batch = 1UL;

    static const bool rowversion = false;

    struct id_image_type
    {
      char id_value[257];
      SQLLEN id_size_ind;

      std::size_t version;
    };

    struct image_type
    {
      // id
      //
      char id_value[257];
      SQLLEN id_size_ind;

      // user_id
      //
      char user_id_value[257];
      SQLLEN user_id_size_ind;

      // business_id
      //
      char business_id_value[257];
      SQLLEN business_id_size_ind;

      std::size_t version;

      mssql::change_callback change_callback_;

      mssql::change_callback*
      change_callback ()
      {
        return &change_callback_;
      }
    };

    struct extra_statement_cache_type;

    struct user_id_tag;
    struct business_id_tag;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static void
    bind (mssql::bind*,
          image_type&,
          mssql::statement_kind);

    static void
    bind (mssql::bind*, id_image_type&);

    static void
    init (image_type&,
          const object_type&,
          mssql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mssql::object_statements<object_type> statements_type;

    typedef mssql::query_base query_base_type;

    static const std::size_t column_count = 3UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, const object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::review, id_common >:
    public access::object_traits_impl< ::review, id_mssql >
  {
  };

  // business
  //
  template <typename A>
  struct query_columns< ::business, id_mssql, A >
  {
    // id
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::std::string,
        mssql::id_string >::query_type,
      mssql::id_string >
    id_type_;

    static const id_type_ id;
  };

  template <typename A>
  const typename query_columns< ::business, id_mssql, A >::id_type_
  query_columns< ::business, id_mssql, A >::
  id (A::table_name, "[id]", 0, 256);

  template <typename A>
  struct pointer_query_columns< ::business, id_mssql, A >:
    query_columns< ::business, id_mssql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::business, id_mssql >:
    public access::object_traits< ::business >
  {
    public:
    static const std::size_t batch = 1UL;

    static const bool rowversion = false;

    struct id_image_type
    {
      char id_value[257];
      SQLLEN id_size_ind;

      std::size_t version;
    };

    struct image_type
    {
      // id
      //
      char id_value[257];
      SQLLEN id_size_ind;

      std::size_t version;

      mssql::change_callback change_callback_;

      mssql::change_callback*
      change_callback ()
      {
        return &change_callback_;
      }
    };

    struct extra_statement_cache_type;

    // review_
    //
    struct review_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 2UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::std::vector< ::odb::lazy_ptr< ::review > > container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::index_type index_type;
      typedef container_traits_type::value_type value_type;

      typedef ordered_functions<index_type, value_type> functions_type;
      typedef mssql::container_statements< review_traits > statements_type;

      struct data_image_type
      {
        // value
        //
        char value_value[257];
        SQLLEN value_size_ind;

        std::size_t version;
      };

      static void
      bind (mssql::bind*,
            const mssql::bind* id,
            std::size_t id_size,
            data_image_type&);

      static void
      init (value_type&,
            const data_image_type&,
            database*);

      static void
      insert (index_type, const value_type&, void*);

      static bool
      select (index_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      load (container_type&,
            statements_type&);
    };

    // hours_
    //
    struct hours_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 2UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::std::vector< ::odb::lazy_ptr< ::hours > > container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::index_type index_type;
      typedef container_traits_type::value_type value_type;

      typedef ordered_functions<index_type, value_type> functions_type;
      typedef mssql::container_statements< hours_traits > statements_type;

      struct data_image_type
      {
        // value
        //
        int value_value;
        SQLLEN value_size_ind;

        std::size_t version;
      };

      static void
      bind (mssql::bind*,
            const mssql::bind* id,
            std::size_t id_size,
            data_image_type&);

      static void
      init (value_type&,
            const data_image_type&,
            database*);

      static void
      insert (index_type, const value_type&, void*);

      static bool
      select (index_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      load (container_type&,
            statements_type&);
    };

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static void
    bind (mssql::bind*,
          image_type&,
          mssql::statement_kind);

    static void
    bind (mssql::bind*, id_image_type&);

    static void
    init (image_type&,
          const object_type&,
          mssql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mssql::object_statements<object_type> statements_type;

    typedef mssql::query_base query_base_type;

    static const std::size_t column_count = 1UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, const object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::business, id_common >:
    public access::object_traits_impl< ::business, id_mssql >
  {
  };

  // hours
  //
  template <typename A>
  struct pointer_query_columns< ::hours, id_mssql, A >
  {
    // id
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        int,
        mssql::id_int >::query_type,
      mssql::id_int >
    id_type_;

    static const id_type_ id;

    // hours
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::std::string,
        mssql::id_string >::query_type,
      mssql::id_string >
    hours_type_;

    static const hours_type_ hours;

    // business_id
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::std::string,
        mssql::id_string >::query_type,
      mssql::id_string >
    business_id_type_;

    static const business_id_type_ business_id;
  };

  template <typename A>
  const typename pointer_query_columns< ::hours, id_mssql, A >::id_type_
  pointer_query_columns< ::hours, id_mssql, A >::
  id (A::table_name, "[id]", 0);

  template <typename A>
  const typename pointer_query_columns< ::hours, id_mssql, A >::hours_type_
  pointer_query_columns< ::hours, id_mssql, A >::
  hours (A::table_name, "[hours]", 0, 512);

  template <typename A>
  const typename pointer_query_columns< ::hours, id_mssql, A >::business_id_type_
  pointer_query_columns< ::hours, id_mssql, A >::
  business_id (A::table_name, "[business_id]", 0, 256);

  template <>
  class access::object_traits_impl< ::hours, id_mssql >:
    public access::object_traits< ::hours >
  {
    public:
    static const std::size_t batch = 1UL;

    static const bool rowversion = false;

    struct id_image_type
    {
      int id_value;
      SQLLEN id_size_ind;

      std::size_t version;
    };

    struct image_type
    {
      // id
      //
      int id_value;
      SQLLEN id_size_ind;

      // hours
      //
      char hours_value[513];
      SQLLEN hours_size_ind;

      // business_id
      //
      char business_id_value[257];
      SQLLEN business_id_size_ind;

      std::size_t version;

      mssql::change_callback change_callback_;

      mssql::change_callback*
      change_callback ()
      {
        return &change_callback_;
      }
    };

    struct extra_statement_cache_type;

    struct business_id_tag;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static void
    bind (mssql::bind*,
          image_type&,
          mssql::statement_kind);

    static void
    bind (mssql::bind*, id_image_type&);

    static void
    init (image_type&,
          const object_type&,
          mssql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mssql::object_statements<object_type> statements_type;

    typedef mssql::query_base query_base_type;

    static const std::size_t column_count = 3UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, const object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::hours, id_common >:
    public access::object_traits_impl< ::hours, id_mssql >
  {
  };

  // user
  //
  // review
  //
  template <>
  struct alias_traits<
    ::user,
    id_mssql,
    access::object_traits_impl< ::review, id_mssql >::user_id_tag>
  {
    static const char table_name[];
  };

  template <>
  struct alias_traits<
    ::business,
    id_mssql,
    access::object_traits_impl< ::review, id_mssql >::business_id_tag>
  {
    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::review, id_mssql >
  {
    // user_id
    //
    typedef
    odb::alias_traits<
      ::user,
      id_mssql,
      access::object_traits_impl< ::review, id_mssql >::user_id_tag>
    user_id_alias_;

    // business_id
    //
    typedef
    odb::alias_traits<
      ::business,
      id_mssql,
      access::object_traits_impl< ::review, id_mssql >::business_id_tag>
    business_id_alias_;
  };

  template <typename A>
  struct query_columns< ::review, id_mssql, A >:
    query_columns_base< ::review, id_mssql >
  {
    // id
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::std::string,
        mssql::id_string >::query_type,
      mssql::id_string >
    id_type_;

    static const id_type_ id;

    // user_id
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::std::string,
        mssql::id_string >::query_type,
      mssql::id_string >
    user_id_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::user,
        id_mssql,
        user_id_alias_ > >
    user_id_pointer_type_;

    struct user_id_type_: user_id_pointer_type_, user_id_column_type_
    {
      user_id_type_ (const char* t,
                     const char* c,
                     const char* conv,
                     unsigned short p = 0,
                     unsigned short s = 0xFFFF)
        : user_id_column_type_ (t, c, conv, p, s)
      {
      }
    };

    static const user_id_type_ user_id;

    // business_id
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::std::string,
        mssql::id_string >::query_type,
      mssql::id_string >
    business_id_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::business,
        id_mssql,
        business_id_alias_ > >
    business_id_pointer_type_;

    struct business_id_type_: business_id_pointer_type_, business_id_column_type_
    {
      business_id_type_ (const char* t,
                         const char* c,
                         const char* conv,
                         unsigned short p = 0,
                         unsigned short s = 0xFFFF)
        : business_id_column_type_ (t, c, conv, p, s)
      {
      }
    };

    static const business_id_type_ business_id;
  };

  template <typename A>
  const typename query_columns< ::review, id_mssql, A >::id_type_
  query_columns< ::review, id_mssql, A >::
  id (A::table_name, "[id]", 0, 256);

  template <typename A>
  const typename query_columns< ::review, id_mssql, A >::user_id_type_
  query_columns< ::review, id_mssql, A >::
  user_id (A::table_name, "[user_id]", 0, 256);

  template <typename A>
  const typename query_columns< ::review, id_mssql, A >::business_id_type_
  query_columns< ::review, id_mssql, A >::
  business_id (A::table_name, "[business_id]", 0, 256);

  // business
  //
  // hours
  //
  template <>
  struct alias_traits<
    ::business,
    id_mssql,
    access::object_traits_impl< ::hours, id_mssql >::business_id_tag>
  {
    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::hours, id_mssql >
  {
    // business_id
    //
    typedef
    odb::alias_traits<
      ::business,
      id_mssql,
      access::object_traits_impl< ::hours, id_mssql >::business_id_tag>
    business_id_alias_;
  };

  template <typename A>
  struct query_columns< ::hours, id_mssql, A >:
    query_columns_base< ::hours, id_mssql >
  {
    // id
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        int,
        mssql::id_int >::query_type,
      mssql::id_int >
    id_type_;

    static const id_type_ id;

    // hours
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::std::string,
        mssql::id_string >::query_type,
      mssql::id_string >
    hours_type_;

    static const hours_type_ hours;

    // business_id
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::std::string,
        mssql::id_string >::query_type,
      mssql::id_string >
    business_id_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::business,
        id_mssql,
        business_id_alias_ > >
    business_id_pointer_type_;

    struct business_id_type_: business_id_pointer_type_, business_id_column_type_
    {
      business_id_type_ (const char* t,
                         const char* c,
                         const char* conv,
                         unsigned short p = 0,
                         unsigned short s = 0xFFFF)
        : business_id_column_type_ (t, c, conv, p, s)
      {
      }
    };

    static const business_id_type_ business_id;
  };

  template <typename A>
  const typename query_columns< ::hours, id_mssql, A >::id_type_
  query_columns< ::hours, id_mssql, A >::
  id (A::table_name, "[id]", 0);

  template <typename A>
  const typename query_columns< ::hours, id_mssql, A >::hours_type_
  query_columns< ::hours, id_mssql, A >::
  hours (A::table_name, "[hours]", 0, 512);

  template <typename A>
  const typename query_columns< ::hours, id_mssql, A >::business_id_type_
  query_columns< ::hours, id_mssql, A >::
  business_id (A::table_name, "[business_id]", 0, 256);
}

#include "Yelp-odb.ixx"

#include <odb/post.hxx>

#endif // YELP_ODB_HXX
